{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","i","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","data","this","filteredMonsters","filter","toLowerCase","includes","searchInput","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGe,SAASA,EAAKC,GAC3B,OACE,sBAAKC,UAAU,iBAAf,UACA,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACD,6BAAML,EAAMI,QAAQE,OACpB,6BAAMN,EAAMI,QAAQG,W,MCJX,SAASC,EAASR,GAE/B,OACE,qBAAKC,UAAU,YAAf,SAEED,EAAMS,SAASC,KAAI,SAAEN,EAASO,GAC5B,OAAO,cAACZ,EAAD,CAAgBK,QAAUA,GAAdO,Q,MCTZ,SAASC,EAAT,GAAkD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC/C,OACE,gCACA,uBACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,IALV,O,ICqDWG,E,kDAnDb,aAAe,IAAD,8BACZ,gBAyBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAxBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,gEAUO,IAAD,OAElBI,MAAM,6CAGHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CACZV,SAAUmB,S,+BAWR,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAC3B,GAAD,OACvCA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACA,oBAAIA,UAAU,YAAd,2BACE,cAACW,EAAD,CACEC,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAACN,EAAD,CACEC,SAAUqB,EACVI,YAAaL,KAAKN,MAAMH,qB,GA7ChBe,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.985d7658.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport default function Card(props) {\n  return (\n    <div className=\"card-container\">\n    <img \n    alt=\"monster\" \n    src={`https://robohash.org/${props.monster.id}?set=set2`} />\n      <h1>{ props.monster.name }</h1>\n      <h2>{ props.monster.email }</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport Card from '../card/card.component'\nimport './card-list.styles.css'\n\n\n\nexport default function CardList(props) {\n  \n  return (\n    <div className='card-list'>\n    {\n      props.monsters.map(( monster, i ) => {\n        return <Card key={ i } monster={ monster } />\n      })\n    }\n    </div>\n  )\n}\n\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport default function SearchBox({ placeholder, handleChange}) {\n  return (\n    <div>\n    <input \n    className='search'\n    type='search' \n    placeholder={placeholder}\n    onChange={handleChange}\n    /> {/* onChange input that fires whenever the input is changed */}\n    </div>\n  )\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [], // initial state of monsters is an empty array\n      searchField: \"\", //initial state of searchField\n    };\n  }\n\n  // a lifecycle method that runs when the app mounts\n  componentDidMount() {\n    // return a promise\n    fetch(\"http://jsonplaceholder.typicode.com/users\")\n      // if promise is successful, it returns a response\n      // get response and change format to JSON\n      .then((response) => response.json())\n      // get the data and change state to update monsters\n      .then((data) =>\n        this.setState({\n          monsters: data,\n        })\n      );\n  }\n\n  //when creating your own class method, you can use a function\n  // a function will automatically bind to the class\n  handleChange = (e) => {  \n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n      <h1 className=\"app-title\">Monster Space</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList\n          monsters={filteredMonsters}\n          searchInput={this.state.searchField}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}